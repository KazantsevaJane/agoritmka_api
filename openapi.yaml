openapi: 3.0.3
info:
  title: CRUD API
  version: 1.0.0
servers:
  - url: http://localhost:3000/api
tags:
  - name: Users
  - name: Students
  - name: Customers
  - name: Orders
  - name: Skills
  - name: Order-skills
  - name: Roles
  - name: Responses
  - name: Response-statuses
  - name: Conversations
  - name: Messages
  - name: Student-projects
  - name: Student-projects-files
  - name: Student-projects-skills
  - name: User-conversations
paths:
  /users:
    get:
      tags:
        - Users
      summary: Get all users
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags:
        - Users
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserBase'
      responses:
        '201':
          description: User created
 
  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: A user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      tags:
        - Users
      summary: Update user by ID
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated

 
  /students:
    get:
      tags:
        - Students
      summary: Get all students
      responses:
        '200':
          description: A list of students
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StudentWithUser'
    post:
      tags:
        - Students
      summary: Create a new student
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostStudentWithUser'
      responses:
        '201':
          description: Student created
 
  /students/{user_id}:
    get:
      tags:
        - Students
      summary: Get student by user_id
      parameters:
        - in: path
          name: user_id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: A student
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentWithUser'
    put:
      tags:
        - Students
      summary: Update student by user_id
      parameters:
        - in: path
          name: user_id
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StudentWithUser'
      responses:
        '200':
          description: Student updated

 
  /customers:
    get:
      tags:
        - Customers
      summary: Get all customers
      responses:
        '200':
          description: A list of customers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomerWithUser'
    post:
      tags:
        - Customers
      summary: Create a new customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCustomerWithUser'
      responses:
        '201':
          description: Customer created
 
  /customers/{user_id}:
    get:
      tags:
        - Customers
      summary: Get customer by user_id
      parameters:
        - in: path
          name: user_id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: A customer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerWithUser'
    put:
      tags:
        - Customers
      summary: Update customer by user_id
      parameters:
        - in: path
          name: user_id
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerWithUser'
      responses:
        '200':
          description: Customer updated

  /orders:
    get:
      tags:
        - Orders
      summary: Get all orders
      responses:
        '200':
          description: A list of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
    post:
      tags:
        - Orders
      summary: Create a new order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderBase'
      responses:
        '201':
          description: Order created
 
  /orders/{id}:
    get:
      tags:
        - Orders
      summary: Get order by ID
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: An order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
    put:
      tags:
        - Orders
      summary: Update order by ID
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Order updated

 
  /skills:
    get:
      tags:
        - Skills
      summary: Get all skills
      responses:
        '200':
          description: List of skills
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Skill'
    post:
      tags:
        - Skills
      summary: Create a skill
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Skill'
      responses:
        '201':
          description: Skill created
 
  /skills/{id}:
    get:
      tags:
        - Skills
      summary: Get a skill by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Skill data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Skill'
    put:
      tags:
        - Skills
      summary: Update a skill
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Skill'
      responses:
        '200':
          description: Skill updated

  /roles:
    get:
      tags:
        - Roles
      summary: Get all roles
      responses:
        '200':
          description: List of roles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
    post:
      tags:
        - Roles
      summary: Create a role
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleBase'
      responses:
        '201':
          description: Role created
 
  /roles/{id}:
    get:
      tags:
        - Roles
      summary: Get role by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Role data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
    put:
      tags:
        - Roles
      summary: Update role
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
      responses:
        '200':
          description: Role updated

 
  /orders-skills:
    get:
      tags:
        - Order-skills
      summary: Get all order-skill links
      responses:
        '200':
          description: List of order-skill links
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrdersSkills'
    post:
      tags:
        - Order-skills
      summary: Create an order-skill link
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrdersSkills'
      responses:
        '201':
          description: Link created
 
  /orders-skills/{id}:
    get:
      tags:
        - Order-skills
      summary: Get order-skill link by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order-skill link data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrdersSkills'
    put:
      tags:
        - Order-skills
      summary: Update order-skill link
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrdersSkills'
      responses:
        '200':
          description: Link updated

  /order-files:
    get:
      tags:
        - Orders
      summary: Get all order files
      responses:
        '200':
          description: List of order files
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderFiles'
    post:
      tags:
        - Orders
      summary: Create an order file
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderFiles'
      responses:
        '201':
          description: Order file created
 
  /order-files/{id}:
    get:
      tags:
        - Orders
      summary: Get order file by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order file data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderFiles'
    put:
      tags:
        - Orders
      summary: Update order file
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderFiles'
      responses:
        '200':
          description: Order file updated

  /responses:
    get:
      tags:
        - Responses
      summary: Get all responses
      responses:
        '200':
          description: List of responses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Response'
    post:
      tags:
        - Responses
      summary: Create a response
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResponseBase'
      responses:
        '201':
          description: Response created
 
  /responses/{id}:
    get:
      tags:
        - Responses
      summary: Get response by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Response data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
    put:
      tags:
        - Responses
      summary: Update response
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Response'
      responses:
        '200':
          description: Response updated
 
  /response-statuses:
    get:
      tags:
        - Response-statuses
      summary: Get all response statuses
      responses:
        '200':
          description: List of response statuses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResponseStatus'
    post:
      tags:
        - Response-statuses
      summary: Create a response status
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResponseStatusBase'
      responses:
        '201':
          description: Response status created
 
  /response-statuses/{id}:
    get:
      tags:
        - Response-statuses
      summary: Get response status by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Response status data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
    put:
      tags:
        - Response-statuses
      summary: Update response status
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResponseStatus'
      responses:
        '200':
          description: Response status updated

  /user-skills:
    get:
      tags:
        - Users
      summary: Get all user skills
      responses:
        '200':
          description: List of user skills
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserSkills'
    post:
      tags:
        - Users
      summary: Create a user skill
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSkills'
      responses:
        '201':
          description: User skill created
 
  /user-skills/{id}:
    get:
      tags:
        - Users
      summary: Get user skill by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User skill data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSkills'
    put:
      tags:
        - Users
      summary: Update user skill
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSkills'
      responses:
        '200':
          description: User skill updated

 
  /conversations:
    get:
      tags:
        - Conversations
      summary: Get all conversations
      responses:
        '200':
          description: List of conversations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Conversation'
    post:
      tags:
        - Conversations
      summary: Create a conversation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConversationBase'
      responses:
        '201':
          description: Conversation created
 
  /conversations/{id}:
    get:
      tags:
        - Conversations
      summary: Get conversation by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Conversation data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
    put:
      tags:
        - Conversations
      summary: Update conversation
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Conversation'
      responses:
        '200':
          description: Conversation updated

  /user-conversations:
    get:
      tags:
        - User-conversations
      summary: Get all user-conversation links
      responses:
        '200':
          description: List of user-conversation links
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserConversation'
    post:
      tags:
        - User-conversations
      summary: Create a user-conversation link
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserConversationBase'
      responses:
        '201':
          description: Link created
 
  /user-conversations/{user_id}/{conversation_id}:
    get:
      tags:
        - User-conversations
      summary: Get user-conversation link by user and conversation ID
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
        - in: path
          name: conversation_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Link data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserConversation'
 
  /messages:
    get:
      tags:
        - Messages
      summary: Get all messages
      responses:
        '200':
          description: List of messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
    post:
      tags:
        - Messages
      summary: Create a message
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageBase'
      responses:
        '201':
          description: Message created
 
  /messages/{id}:
    get:
      tags:
        - Messages
      summary: Get message by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Message data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
    put:
      tags:
        - Messages
      summary: Update message
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      responses:
        '200':
          description: Message updated

  /messages/conversation/{conversation_id}:
    get:
      tags:
        - Messages
      summary: Get all messages by conversation ID
      parameters:
        - in: path
          name: conversation_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of messages in the conversation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
  /message-files:
    get:
      tags:
        - Messages
      summary: Get all message files
      responses:
        '200':
          description: List of message files
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MessageFile'
    post:
      tags:
        - Messages
      summary: Create a message file
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageFileBase'
      responses:
        '201':
          description: Message file created
 
  /message-files/{id}:
    get:
      tags:
        - Messages
      summary: Get message file by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Message file data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageFile'
    put:
      tags:
        - Messages
      summary: Update message file
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageFile'
      responses:
        '200':
          description: Message file updated

  /student-projects:
    get:
      tags:
        - Student-projects
      summary: Get all student projects
      responses:
        '200':
          description: List of student projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StudentProject'
    post:
      tags:
        - Student-projects
      summary: Create a student project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StudentProjectBase'
      responses:
        '201':
          description: Project created
 
  /student-projects/{id}:
    get:
      tags:
        - Student-projects
      summary: Get student project by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Project data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentProject'
    put:
      tags:
        - Student-projects
      summary: Update student project
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StudentProject'
      responses:
        '200':
          description: Project updated
 
  /student-projects-files:
    get:
      tags:
        - Student-projects-files
      summary: Get all student project files
      responses:
        '200':
          description: List of files
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StudentProjectFile'
    post:
      tags:
        - Student-projects-files
      summary: Create a student project file
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StudentProjectFileBase'
      responses:
        '201':
          description: File created
 
  /student-projects-files/{id}:
    get:
      tags:
        - Student-projects-files
      summary: Get student project file by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: File data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentProjectFile'
    put:
      tags:
        - Student-projects-files
      summary: Update student project file
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StudentProjectFile'
      responses:
        '200':
          description: File updated

 
  /student-projects-skills:
    get:
      tags:
        - Student-projects-skills
      summary: Get all student project skills
      responses:
        '200':
          description: List of project skills
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StudentProjectSkill'
    post:
      tags:
        - Student-projects-skills
      summary: Create a student project skill
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StudentProjectSkillBase'
      responses:
        '201':
          description: Project skill created
 
  /student-projects-skills/{id}:
    get:
      tags:
        - Student-projects-skills
      summary: Get student project skill by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Project skill data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentProjectSkill'
    put:
      tags:
        - Student-projects-skills
      summary: Update student project skill
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StudentProjectSkill'
      responses:
        '200':
          description: Project skill updated
 
components:
  schemas:
    UserBase:
      type: object
      required:
        - login
        - password
        - name
        - surname
        - role_id
      properties:
        login:
          type: string
        password:
          type: string
        name:
          type: string
        surname:
          type: string
        patronymic:
          type: string
          nullable: true
        role_id:
          type: string
          format: uuid
        photo:
          type: string

    # Схема пользователя с id (для ответа)
    User:
      allOf:
        - $ref: '#/components/schemas/UserBase'
        - type: object
          properties:
            id:
              type: string
              format: uuid

    # Базовая схема для студента (без user_id)
    StudentBase:
      type: object
      required:
        - date_of_birth
        - profile_info
      properties:
        date_of_birth:
          type: string
          format: date
        profile_info:
          type: string

    # Схема для ответа: Student + User
    StudentWithUser:
      allOf:
        - $ref: '#/components/schemas/User'
        - $ref: '#/components/schemas/StudentBase'
        - type: object
      properties:
        skills:
          type: array
          items:
            $ref: '#/components/schemas/Skill'
          description: List of skills associated with the student

    # Схема для создания: UserBase + StudentBase
    PostStudentWithUser:
      allOf:
        - $ref: '#/components/schemas/UserBase'
        - $ref: '#/components/schemas/StudentBase'
      properties:
        skills:
          type: array
          items:
            $ref: '#/components/schemas/UserSkills'
          description: List of skills associated with the student

    # Базовая схема заказчика
    CustomerBase:
      type: object
      required:
        - company_name
      properties:
        company_name:
          type: string

    # Схема для ответа: Customer + User
    CustomerWithUser:
      allOf:
        - $ref: '#/components/schemas/User'
        - $ref: '#/components/schemas/CustomerBase'

    # Схема для создания: UserBase + CustomerBase
    PostCustomerWithUser:
      allOf:
        - $ref: '#/components/schemas/UserBase'
        - $ref: '#/components/schemas/CustomerBase'
 
    Customer:
      type: object
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            company_name:
              type: string
 
    OrderBase:
      type: object
      required:
        - customer_id
        - name
        - short_decription
        - long_decription
        - dificult
        - publication_date
        - completion_date
      properties:
        customer_id:
          type: string
          format: uuid
        performer_id:
          type: string
          format: uuid
          nullable: true
        name:
          type: string
        short_decription:
          type: string
        long_decription:
          type: string
        dificult:
          type: integer
        publication_date:
          type: string
          format: date
        completion_date:
          type: string
          format: date
      
    Order:
      allOf:
        - $ref: '#/components/schemas/OrderBase'
        - type: object
          properties:
            id:
              type: string
              format: uuid

    Skill:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string

    OrdersSkills:
      type: object
      properties:
        id:
          type: string
          format: uuid
        skill_id:
          type: string
          format: uuid
        order_id:
          type: string
          format: uuid
    RoleBase:
      type: object
      required:
        - name
      properties:
        name:
          type: string
    Role:
      allOf:
        - $ref: '#/components/schemas/RoleBase'
        - type: object
          properties:
            id:
              type: string
              format: uuid

    OrderFiles:
      type: object
      properties:
        id:
          type: string
          format: uuid
        order_id:
          type: string
          format: uuid
        file_url:
          type: string

    ResponseBase:
      type: object
      required:
        - order_id
        - student_id
        - status_id
        - date
      properties:
        order_id:
          type: string
          format: uuid
        student_id:
          type: string
          format: uuid
        status_id:
          type: string
          format: uuid
        date:
          type: string
          format: date

    Response:
      allOf:
        - $ref: '#/components/schemas/ResponseBase'
        - type: object
          properties:
            id:
              type: string
              format: uuid

    ResponseStatusBase:
      type: object
      required:
        - name
      properties:
        name:
          type: string

    ResponseStatus:
      allOf:
        - $ref: '#/components/schemas/ResponseStatusBase'
        - type: object
          properties:
            id:
              type: string
              format: uuid

    UserSkills:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        skill_id:
          type: string
          format: uuid
    ConversationBase:
      type: object
      required:
        - order_id
        - name
      properties:
        order_id:
          type: string
          format: uuid
        name:
          type: string
    Conversation:
      allOf:
        - $ref: '#/components/schemas/ConversationBase'
        - type: object
          properties:
            id:
              type: string
              format: uuid
    UserConversationBase:
      type: object
      required:
        - user_id
        - conversation_id
      properties:
        user_id:
          type: string
          format: uuid
        conversation_id:
          type: string
          format: uuid
    UserConversation:
      allOf:
        - $ref: '#/components/schemas/UserConversationBase'
        - type: object
          properties:
            id:
              type: string
              format: uuid

    MessageBase:
      type: object
      required:
        - sender_id
        - conversation_id
        - time_date
        - content
        - is_files
      properties:
        sender_id:
          type: string
          format: uuid
        conversation_id:
          type: string
          format: uuid
        time_date:
          type: string
          format: date
        content:
          type: string
        is_files:
          type: boolean

    Message:
      allOf:
        - $ref: '#/components/schemas/MessageBase'
        - type: object
          properties:
            id:
              type: string
              format: uuid

    MessageFileBase:
      type: object
      required:
        - message_id
        - file_url
      properties:
        message_id:
          type: string
          format: uuid
        file_url:
          type: string

    MessageFile:
      allOf:
        - $ref: '#/components/schemas/MessageFileBase'
        - type: object
          properties:
            id:
              type: string
              format: uuid

    StudentProjectBase:
      type: object
      required:
        - name
        - description
        - result_description
        - is_individual
        - publication_date
        - user_id
      properties:
        name:
          type: string
        description:
          type: string
        result_description:
          type: string
        is_individual:
          type: boolean
        publication_date:
          type: string
          format: date
        user_id:
          type: string
          format: uuid

    StudentProject:
      allOf:
        - $ref: '#/components/schemas/StudentProjectBase'
        - type: object
          properties:
            id:
              type: string
              format: uuid

    StudentProjectFileBase:
      type: object
      required:
        - project_id
        - file_url
      properties:
        project_id:
          type: string
          format: uuid
        file_url:
          type: string

    StudentProjectFile:
      allOf:
        - $ref: '#/components/schemas/StudentProjectFileBase'
        - type: object
          properties:
            id:
              type: string
              format: uuid

    StudentProjectSkillBase:
      type: object
      required:
        - project_id
        - skill_id
        - company_name
      properties:
        project_id:
          type: string
          format: uuid
        skill_id:
          type: string 
          format: uuid
        company_name:
          type: string

    StudentProjectSkill:
      allOf:
        - $ref: '#/components/schemas/StudentProjectSkillBase'
        - type: object
          properties:
            id:
              type: string
              format: uuid
